{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/posts/typescript-react/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Electric Sheep"}},"markdownRemark":{"id":"95bd209f-1ea2-5f6d-a1dd-a284acd33ed2","excerpt":"This is the first in a series of posts delving into using React with\nTypeScript. Using TypeScript (Ts) with React is a lot of\nfun, Ts in general is! It helps to…","html":"<p>This is the first in a series of posts delving into using <strong>React</strong> with\n<strong>TypeScript</strong>.</p>\n<p>Using <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript</a> (Ts) with React is a lot of\nfun, Ts in general is! It helps to\neradicate a whole subset of bugs, document JavaScript (Js) code with the intent\nof the original author and makes it easier to onboard developers to a project.</p>\n<p>Project starters that such as <a href=\"https://create-react-app.dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-app</a>\nhave Ts <a href=\"https://create-react-app.dev/docs/adding-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">optional</a>\nsupport built into their project bootstrapping. For <code>create-react-app</code> you need\nto add the flag <code>--template typescript</code> when you initialise your new application.</p>\n<p>Adding TypeScript to and existing project depends on your set up so advise on\nsetup should be sought, most people are likely using\n<a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">webpack</a> and their\n<a href=\"https://webpack.js.org/guides/typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ts docs</a> are well maintained.\nFundamentally you need to get <code>.ts</code> and <code>.tsx</code> file types transpiled in your\nbuild pipeline.</p>\n<p>Using Ts on a <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>npm</code></a> based project some packages you\ninstall will ship with <em>Type Definitions</em> (typings), some like\n<a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React</a> don’t.</p>\n<p><em>Type Definitions</em> allow the Ts complier (<code>tsc</code>) to enforce the API of the\nlibraries you use, making third party library consumption easy. Ts also ships\nwith typings for standard Js, so writing plain Ts as a direct replacement for Js\nis a doddle.</p>\n<p>If <strong>React</strong> does not have a types definitions shipped, what do we do? Luckily\nthere is a community lead project called\n<a href=\"https://definitelytyped.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DefinitelyTyped</a> which maintains a repository for\nthe major Js projects (such as React) on\n<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>, MicroSoft in turn\nmake sure these typings are available on <code>npm</code>, under the\n<a href=\"https://www.npmjs.com/search?q=%40types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>@types</code></a> scope. These typings are\ninstalled as <strong>devDependencies</strong>, as types are not required at runtime.</p>\n<p>Run the following command to get typings for your <strong>React</strong> code.</p>\n<h4>npm</h4>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"sh\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">npm i -D @types/node @types/react @types/react-dom</span></span></span></code></pre>\n<h4>yarn</h4>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"sh\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">yarn add -D @types/node @types/react @types/react-dom</span></span></span></code></pre>\n<p>Typings for <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> are also available from the package\n<code>@types/jest</code>.</p>\n<p>Once your configuration is setup, you can start creating you first components.</p>\n<p>Lets start simple and create a <code>&#x3C;Title /></code> component. I will be writing in the\nfunctional form of <strong>React</strong>, writing with <em>Reacts</em> object form is also supported.</p>\n<p>Create a new file <code>Title.tsx</code>, the <code>.tsx</code> file extension is used to denote JSX\nwritten in Ts.</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"tsx\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\">// Title.tsx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\">// We define the type for our props</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">type</span><span class=\"mtk1\"> </span><span class=\"mtk5\">TitleProps</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  children</span><span class=\"mtk7\">?:</span><span class=\"mtk1\"> </span><span class=\"mtk5\">ReactNode</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\">// We use the type to define our components API</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9 mtki\">const</span><span class=\"mtk1\"> </span><span class=\"mtk5\">Title</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">props</span><span class=\"mtk7\">:</span><span class=\"mtk1\"> </span><span class=\"mtk5\">TitleProps</span><span class=\"mtk1\">) </span><span class=\"mtk9 mtki\">=&gt;</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk7\">h1</span><span class=\"mtk1\">&gt;</span><span class=\"mtk7\">{</span><span class=\"mtk1\">children</span><span class=\"mtk7\">}</span><span class=\"mtk1\">&lt;/</span><span class=\"mtk7\">h1</span><span class=\"mtk1\">&gt;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7 mtki\">export</span><span class=\"mtk1\"> </span><span class=\"mtk7 mtki\">default</span><span class=\"mtk1\"> Title;</span></span></span></code></pre>\n<p>Its about as simple as that, we you consume the component the API of our\ncomponent is known by our IDE, contract of the API is enforced at transpile\ntime, resulting in a failed build if the component is being used incorrectly\nand live feedback is provided from the IDE to the developer as they work.</p>\n<p>As a note, the <code>type</code> keyword can be replaced with <code>interface</code> in this example.\nThe <code>ReactNode</code> type is very broad but probably the most appropriate for child\nelement in <strong>React</strong>.</p>\n<h4>Resources</h4>\n<p>A list of resources that may be useful on your React TypeScript journey.</p>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/intro.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript Handbook</a></li>\n<li><a href=\"https://basarat.gitbook.io/typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript Deep Dive</a></li>\n<li><a href=\"https://react-typescript-cheatsheet.netlify.app/docs/basic/setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React TypeScript Cheatsheet</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai-operator {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai-operator .mtki { font-style: italic; }\n  .monokai-operator .mtk1 { color: #F8F8F2; }\n  .monokai-operator .mtk3 { color: #88846F; }\n  .monokai-operator .mtk9 { color: #66D9EF; }\n  .monokai-operator .mtk5 { color: #A6E22E; }\n  .monokai-operator .mtk7 { color: #F92672; }\n  .monokai-operator .mtk10 { color: #FD971F; }\n  .monokai-operator .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"React: TypeScript basics","date":"March 26, 2022"}}},"pageContext":{"slug":"/posts/typescript-react/","previous":{"fields":{"slug":"/posts/angular-in-docker/"},"frontmatter":{"title":"Angular Development in Docker - Part 1"}},"next":null}},
    "staticQueryHashes": ["63159454"]}