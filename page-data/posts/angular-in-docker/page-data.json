{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/posts/angular-in-docker/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Electric Sheep"}},"markdownRemark":{"id":"dceeb512-d4de-575b-8a2d-dd500723f341","excerpt":"Angular Development in Docker We need to create a local working directory four our source code, if your using\nWSL, place this in your WSL file system rather…","html":"<h1>Angular Development in Docker</h1>\n<p>We need to create a local working directory four our source code, if your using\nWSL, place this in your WSL file system rather than a <code>mnt/c</code> location.</p>\n<h2><code>.dockerignore</code></h2>\n<p>Create a <code>.dockeringore</code> file in the project root directory.</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">.git</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">.gitignore</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">.vscode</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">docker-compose*.yml</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Dockerfile</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">node_modules</span></span></code></pre>\n<p>It’s worth adding any file/folder that you docker image does not require as the\nignore file stops the build process from copying the data into your image.</p>\n<h2><code>Dockerfile</code></h2>\n<p>Next we can create a <code>Dockerfile</code> in the project root directory</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"dockerfile\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\"># Dockerfile</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">FROM</span><span class=\"mtk1\"> node:lts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">RUN</span><span class=\"mtk1\"> mkdir /home/node/app &amp;&amp; chown node:node /home/node/app</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">RUN</span><span class=\"mtk1\"> mkdir /home/node/app/node_modules &amp;&amp; chown node:node /home/node/app/node_modules</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">WORKDIR</span><span class=\"mtk1\">  /home/node/app</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">USER</span><span class=\"mtk1\"> node</span></span></span></code></pre>\n<p>This downloads the current NodeJs LTS image, we use the full image for a\ndevelopment environment so we have access to git.</p>\n<p>The Dockerfile creates our <code>WORKDIR</code> and localtion for <code>node_modules</code>\ndirectory to <code>/srv/app</code> where we will bind our source code and our <code>node_modules</code>\nvolume.</p>\n<p>Finally we set our user to the default <code>node</code> user supplied with the node image\nso we don’t run as root. If we don’t set this we will have issues\nwith <code>npx</code> shortly. We also need to make sure the node user owns the working\ndirectory and <code>node_modules</code> otherwise we will have installation issues.</p>\n<h2><code>docker-compose.yml</code></h2>\n<p>Now lets create a <code>docker-compose.yml</code> to manage our setup.</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"yml\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\"># docker-compose</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">version</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&#39;3.7&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">services</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">app</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">build</span><span class=\"mtk1\">: </span><span class=\"mtk4\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">command</span><span class=\"mtk1\">: </span><span class=\"mtk6\">echo &#39;ready&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">volumes</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      - </span><span class=\"mtk6\">./:/home/node/app</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      - </span><span class=\"mtk6\">node_modules:/home/node/app/node_modules</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">volumes</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">node_modules</span><span class=\"mtk1\">:</span></span></span></code></pre>\n<p><code>build: .</code> will build the <code>Dockerfile</code> in the current location when\n<code>docker-compose build</code> is run.</p>\n<p><code>command:</code> we will replace this with our call to the development server shortly.\n<code>volumes:</code> we are using this to mount our current working directory in to the\ncontainer and a volume for <code>node_modules</code> to reside in.</p>\n<p>We have two options for building the image, via <code>docker</code> or <code>docker-compose</code></p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"sh\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">docker build -t app </span><span class=\"mtk9\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">docker-compose build</span></span></span></code></pre>\n<p>We will be using the <code>docker-compose</code> from now on as it simplifies the commands.</p>\n<p>Now that our bse node image is building, we can leverage node without the need\nto install on our local machine. We can use <code>docker-compose</code> to launch an image\nthat is bound to our source folder and start using it to install node packages.</p>\n<p>First we need to start the container and get shell</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"sh\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ docker-compose run --rm app bash</span></span></span></code></pre>\n<p>You will be in the container shell ready to work with <code>npx</code>, to use the\n<a href=\"https://cli.angular.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Angular CLI</a> to create a new app we want to move back\na folder and generate a new project.</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"sh\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ </span><span class=\"mtk9\">cd</span><span class=\"mtk1\"> ..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ npx -p @angular/cli ng new app --strict=true</span></span></span></code></pre>\n<p><code>--strict=true</code> - because TypeScript.</p>\n<p>If you have a look at your local folder, you will be please to see that you have\nall the you Angular configuration and a bootstrapped app almost ready to develop\nwith.</p>\n<h2><code>node_modules</code></h2>\n<p>Now lets look at our Dockerfile, we need to optimise the layer building process.\nLets start by copying our <code>package.json</code> and <code>package-lock.json</code></p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"dockerfile\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\"># Dockerfile</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">COPY</span><span class=\"mtk1\"> --chown=node:node package.json package-lock.json ./</span></span></span></code></pre>\n<p>Now we have our <code>package.json</code> and <code>package-lock.json</code> we can populate our\n<code>node_modules</code>.</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"dockerfile\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\"># Dockerfile</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\"># ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">RUN</span><span class=\"mtk1\"> npm ci --quiet</span></span></span></code></pre>\n<p>This will populate the <code>node_modules</code> folder as part of our image build, as this\nis a layer of our Docker image, if <code>package.json</code> or <code>package-lock.json</code> changes\nthe layer is rebuilt and <code>node_modules</code> is repopulated. If there are no changes\nto <code>package.json</code> or <code>package-lock.json</code> docker uses the cached layer until one\nof these files changes.</p>\n<p>We use <code>npm ci</code> to install, so our dependencies don’t change underneath us.</p>\n<p>Finally we can copy the rest of the source files into the container, we should\nend up with something like this</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"dockerfile\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\"># Dockerfile</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">FROM</span><span class=\"mtk1\"> node:lts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">RUN</span><span class=\"mtk1\"> mkdir /home/node/app &amp;&amp; chown node:node /home/node/app</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">RUN</span><span class=\"mtk1\"> mkdir /home/node/app/node_modules &amp;&amp; chown node:node /home/node/app/node_modules</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">WORKDIR</span><span class=\"mtk1\">  /home/node/app</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">USER</span><span class=\"mtk1\"> node</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">COPY</span><span class=\"mtk1\"> --chown=node:node package.json package-lock.json ./</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">RUN</span><span class=\"mtk1\"> npm ci --quiet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">COPY</span><span class=\"mtk1\"> --chown=node:node . .</span></span></span></code></pre>\n<h2><code>ng serve</code></h2>\n<p>Now let’s get <code>docker-compose</code> to start our app and expose the correct port</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"yml\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3 mtki\"># docker-compose</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">version</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&#39;3.7&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">services</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">services</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">app</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">build</span><span class=\"mtk1\">: </span><span class=\"mtk4\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">command</span><span class=\"mtk1\">: </span><span class=\"mtk6\">sh -c &quot;npm start&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">ports</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      - </span><span class=\"mtk6\">4200:4200</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">working_dir</span><span class=\"mtk1\">: </span><span class=\"mtk6\">/home/node/app</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">volumes</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      - </span><span class=\"mtk6\">./:/home/node/app</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      - </span><span class=\"mtk6\">node_modules:/home/node/app/node_modules</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">volumes</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">node_modules</span><span class=\"mtk1\">:</span></span></span></code></pre>\n<p><code>command:</code> - runs a shell command to start our development server.</p>\n<p>We have exposed the Angular CLI port <code>4200</code> so when we <code>docker-compose run</code> we\nwe can go to <code>localhost:4200</code> and hit the Angular CLI development server.</p>\n<p>As we are running inside a docker container we need to bind the Angular CLI\nserver correctly by detailing the host. Todo this we update <code>package.json</code></p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"json\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk6\">&quot;scripts&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;ng&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk13\">&quot;ng&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;start&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk13\">&quot;ng serve --host 0.0.0.0&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;build&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk13\">&quot;ng build&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;test&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk13\">&quot;ng test&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;lint&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk13\">&quot;ng lint&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk9 mtki\">&quot;e2e&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk13\">&quot;ng e2e&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">},</span></span></span></code></pre>\n<p>The <code>--host 0.0.0.0</code> binds the server within the docker container so that we\ncan expose the server port <code>4200</code> on our <code>localhost</code>, this means you get your\nnormal Angular CLI workflow.</p>\n<h2>Build</h2>\n<p>Lets use <code>docker-compose</code> to build</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"sh\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ docker-compose build</span></span></span></code></pre>\n<h2>Running</h2>\n<p>To start</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"sh\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ docker-compose up -d</span></span></span></code></pre>\n<p><code>-d</code> Launches you container in a detached state, we can browse to\n<a href=\"localhost:4200\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">localhost:4200</a> and start developing as we normally would.</p>\n<p>To stop the container</p>\n<pre class=\"grvsc-container monokai-operator\" data-language=\"sh\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ docker-compose down</span></span></span></code></pre>\n<p>In the next part we will look at how we are able to take this starting point and\nbuild a distribution of our application before using the complied distribution\nand running it in a containerised server.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai-operator {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai-operator .mtki { font-style: italic; }\n  .monokai-operator .mtk3 { color: #88846F; }\n  .monokai-operator .mtk7 { color: #F92672; }\n  .monokai-operator .mtk1 { color: #F8F8F2; }\n  .monokai-operator .mtk6 { color: #E6DB74; }\n  .monokai-operator .mtk4 { color: #AE81FF; }\n  .monokai-operator .mtk9 { color: #66D9EF; }\n  .monokai-operator .mtk13 { color: #CFCFC2; }\n  .monokai-operator .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Angular Development in Docker - Part 1","date":"June 24, 2020"}}},"pageContext":{"slug":"/posts/angular-in-docker/","previous":{"fields":{"slug":"/posts/angular-strict/"},"frontmatter":{"title":"Angular strict mode"}},"next":{"fields":{"slug":"/posts/typescript-react/"},"frontmatter":{"title":"React: TypeScript basics"}}}},
    "staticQueryHashes": ["63159454"]}